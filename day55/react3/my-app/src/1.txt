라우트 = 경로

페이지 라우팅 = 경로를 지정하는 과정

앱에서 월별 일기 리스트
지난달로 가면 일기 없음 = 월별 일기 세부 페이지 존재




리액트에서의 페이지 라우팅 서버 사이드 렌더링과 클라이언트 사이드 렌더링이 구분
다만 리액트는 클라이언트 사이드 렌더링을 채택





서버사이드 렌더링
1. 웹브라우저에서 url로 서비스 요청
   naver_webtoon.com 들어가서 만화 서비스 요청
2. 웹서버는 요청 url에서 경로 blog를 보고 해당 html을 반환
3. 화면 렌더링



클라이언트 사이드 렌더링
- html 파일이 하나 (메인 app.js 안에 컴포넌트 나눈 것들이 하나로 뭉쳐서 컨텐츠 표시)
- 서버사이드방식과 달리 요청 url을 따지지 않고
  자바스크립트로 나누어진 리액트 앱을 리턴
  처음에 서버를 시작할때는 서버사이드 방식보다 느린데 키고 나서는 빠름


가끔씩 리액트를 서버사이드 렌더링 방식으로 돌려야할 경우도 생기긴 한다. (Next.js는 그래서 유니버셜 렌더링 방식 채택)


언급했던 클라이언트 렌더링을 하려는게 리액트 라우터
(react-router-dom)






페이지 컴포넌트 만들기 (구성요소의 파악)

home - 메인 화면
new - 새 일기 화면
diary - 일기 상세 화면
edit - 일기 수정 화면








개발해야하는 화면은 4개
node.js 기반이었다면 세부주소가 있어야하는 페이지들
Home - 인덱스 페이지
New - 새 일기 작성 페이지
Diary - 일기 상세 페이지
Edit - 작성한 일기 수정 페이지













리액트 훅스 중 하나인 useNavigate는 편리한 기능 제공
예를 들어 바로 edit/id로 보냄
const goEdit = () => {
  navigate(`edit/${id}`);
};

단, 리액트 훅스의 사용엔 제약이 하나 있음
컴포넌트에서만 사용 가능 (컴포넌트를 위한 기능이기 때문에 일반함수로는 제작불가능 - 일반함수로 호출하면 오류 발생)


커스텀 훅 - 리액트 훅의 기능을 사용자가 직접 구현하는 것










html5에서는 웹 스토리지라는 기능을 지원하고 최대 5mb 정도의 데이터를 저장할 수 있음

- 로컬 스토리지 : window.localStorage 라는 명령어를 사용해서 웹 데이터를 저장
                고유 도메인이 바뀌면 기존 데이터 접속 불가
                같은 도메인 주소에서만 데이터 접근 가능 (사용자가 직접 지워야 함)

- 세션 스토리지 : window.SessionStorage 라는 명령어로 웹 데이터를 저장. / 대신에 브라우저 종료 시 데이터도 삭제
                새로고침이 발생해도 문제 없음



로컬 스토리지 사용법
데이터 생성 / 수정하기
객체 localStorage에서 setItem 호출해서 key & value 전달
localStorage.setItem("key", value);


지금 케이스는 value가 객체일 때 객체를 해석하여 문자열로 변환하는 JSON.stringify 메서드를 사용해서 문자열 데이터로 변환하여 사용
localStorage.setItem("key", JSON.stringify(value));

원래 객체 상태로 원복하고 싶다면 아래처럼 작성
const data = JSON.parse(localStorage.getItem("key"));
이렇게 하면 문자열 데이터를 key 값 기준으로 객체상태 원복

데이터 지우려면 아래처럼 작성
localStorage.removeItem("key"); 삭제하고 싶은 데이터의 key값을 인풋으로




세션 스토리지 사용법 - 로컬 스토리지와 사용법 동일
sessionStorage.setItem("key", value);
sessionStorage.setItem("key", JSON.stringify(value));
sessionStorage.removeItem(key);







리액트는 메인html 페이지가 하나
세부 페이지별 제목을 다르게 가져가려면
구글 검색하면 여러가지 나옴
여기서는 함수 생성





















오픈 그래프 태그 - 링크를 공유할 때 썸네일 페이지 제목 간단한 설명이 노출되는 태그





















// terminal
npm run build

-> build 폴더 생성됨



구글 파이어베이스
배포할 때 구글 파이어베이스는 firebase CLI를 설치
CLI - command line interface
터미널에서 호스팅을 설정하는 파이어베이스의 지원도구

git bash에서 npm install -g firebase-tools





cmd 관리자 권한 실행

firebase login


리액트 폴더로 이동후
firebase init

>(*) Hosting: Set up GitHub Action deploys

Use an existing project


Error: Didn't find a Hosting config in firebase.json. Run firebase init hosting instead. 발생시



firebase init hosting 으로 진행하면 해결

build
yes
no
yes





firebase.json -> 호스팅 구성을 정의 (어떤 폴더일지 어떤 파일을 포함할지 대상 사이트는 어디인지 정보)
.firebaserc -> 배포대상 프로젝트의 정의




npm run build && firebase deploy




firebase에서 다른 사이트 추가 -> 원하는 주소 생성

firebase.json에 추가
"host" : "주소"

npm run build && firebase deploy



















배포를 위해 어떤 작업을 무슨 목적으로 하였는지 단계별 정리

파이어베이스 프로젝트 만들기 클릭
프로젝트 이름 지정 후 구글 애널리틱스는 끔 (쓸데 없이 데이터 전달 + 느림)
빌드 - hosting으로 가서 시작하기 클릭

npm install -g firebase-tools 설치
(구글 파이어베이스 툴을 내 컴퓨터에 설치)

cmd 관리자 권한 실행
firebase login
이때 firebase 안먹히면  환경변수에 C:\Users\hsb97\AppData\Roaming\npm 추가 (C:\Users\hsb97\AppData\Roaming\npm 안에 firebase 설치되어있음)
firebase login 해서 파이어베이스와 내 컴퓨터 연결

cd 내작업폴더경로
firebase init -> firebase.json 만들려고 함
내작업폴더에 firebase.json이 만들어져야함


실제적인 배포 명령어
npm run build && firebase deploy
단, 초기 생성 도메인은 유저가 입력하기 어렵게 되어있다.
원하는 도메인 주소를 생성해서 재 배포가 필요

빌드 - hosting 맨 밑으로 가서
'다른 사이트 추가' 클릭
원하는 도메인 입력
firebase.json 에
"site" : "내가 지정한 사이트 주소",   추가    (단, 사이트주소 앞의 https://와 뒤의 .web.app 작성하지 않음)

firebase.json 수정 후
npm run build && firebase deploy


이후에 추가적인 서비스 파일 수정이나 오류 픽스가 있다면
npm run build && firebase deploy    재실행

마지막으로 내가 배포한 서비스 도메인 주소 들어가서 잘 되는지 체크
(카톡으로 주소 보내서 오픈그래프도 작 되는지 체크)


























git init
git add .
git config --global user.email 깃허브메일
git config --global user.name 깃허브이름
git commit -m "아무내용"
git remote add origin 깃허브주소
git push origin master